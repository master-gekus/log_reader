/**
* \file log_reader_result.h
*/

#pragma once
#ifndef LOG_READER_RESULT_H_INCLUDED
#define LOG_READER_RESULT_H_INCLUDED

#include <stdint.h>

/**
 * @brief ILogReaderResult интерфейс для получения результата произвольной длины.
 */
class ILogReaderResult
{
public:
  ILogReaderResult();
  virtual ~ILogReaderResult();

public:
  /**
   * @brief Write - запись части результата
   * @param data Данные для записи. Никогда не может быть NULL
   * @param size Размер записываемых данных. Никодна не может быть 0.
   * @return Количество реально записанных байт. 0, если дальнейшая запись результата невозможна.
   *
   * Обязательный для перекрытия метод, в который передаются данные для записи результата.
   * По возможности данные передаются единым блоком, однако в случае большого объёма возможно
   * последовательных несколько вызовов.
   */
  virtual uint64_t Write(const void* data, size_t size) = 0;

  /**
   * @brief Close - завершение передачи данных.
   *
   * Функция вызывается после завершения передачи всех данных и может быть использована для некоторых
   * завершающих действий - например, для добавления терминирующего нуля.
   *
   * Не обязательна для перекрытия. Реализация по умолчанию не делает ничего.
   */
  virtual void Close();

  /**
   * @brief SetLineNumber - установить номер строки
   * @param number - номер строки, для которой будут передаваться данные
   *
   * Функция вызывается самой первой, что даёт возможность, например, вывести номер строки в начале
   * общего вывода.
   *
   * Не обязательна для перекрытия. Реализация по умолчанию не делает ничего.
   */
  virtual void SetLineNumber(unsigned number);
};

#endif // !LOG_READER_RESULT_H_INCLUDED
